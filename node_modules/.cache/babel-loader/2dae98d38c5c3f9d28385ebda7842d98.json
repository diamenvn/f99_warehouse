{"ast":null,"code":"var _jsxFileName = \"/Users/onion9x/Documents/Source Code/f99_warehouse/src/components/site/datatable/index.js\";\nimport React, { Component } from 'react';\nimport Header from './header';\nimport Main from './main';\nimport './style.sass';\nimport { message, Button } from 'antd';\nimport { AppAPI } from '../../../api/appApi';\n\nclass Analytics extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      columnState: [{\n        title: '#',\n        width: 90,\n        dataIndex: 'id',\n        key: 'id',\n        fixed: 'left'\n      }],\n      dataSource: [],\n      loading: true,\n      params: [],\n      page: 1,\n      lastPage: 1,\n      currentPage: 1,\n      collection: [],\n      id: this.props.match.params.id,\n      filter: [],\n      textFilterBy: [{\n        text: 'Tên khách hàng',\n        key: 'customer_name'\n      }, {\n        text: 'Số điện thoại',\n        key: 'customer_phone'\n      }, {\n        text: 'Mua theo sản phẩm',\n        key: 'products'\n      }, {\n        text: 'Số lần mua hàng',\n        key: 'count_buy'\n      }, {\n        text: 'Tỉnh thành, Quận huyện',\n        key: 'customer_address'\n      }, {\n        text: 'Công ty chi nhánh',\n        key: 'branch'\n      }, {\n        text: 'Thời gian mua',\n        key: 'date'\n      }]\n    };\n\n    this.saveCollection = text => {\n      let params = {\n        'text': text,\n        'filter': this.state.params\n      };\n      AppAPI.saveCollection(params).then(res => {\n        const {\n          data\n        } = res;\n\n        if (data.success) {\n          message.success(data.msg);\n        } else {\n          message.error(data.msg);\n        }\n      });\n    };\n\n    this.updateDataTable = arrayFilter => {\n      let params = arrayFilter;\n      document.querySelector('.ant-table-body').scrollTop = \"0px\";\n      this.setState(prevState => ({\n        page: 1,\n        params: [...prevState.params, params]\n      }), function () {\n        this.fetchListDataFromAPI(this.state.params);\n      });\n    };\n\n    this.fetchListDataFromAPI = (params = '', append = false) => {\n      this.setState({\n        loading: true\n      });\n      let page = this.state.page;\n      AppAPI.getAllData(params, page).then(res => {\n        const {\n          data\n        } = res;\n        var stt = 0;\n\n        if (append) {\n          if (data.success) {\n            data.data.rows.map(res => {\n              stt += 1;\n              let obj = res;\n              this.setState(prevState => ({\n                dataSource: [...prevState.dataSource, obj]\n              }));\n            });\n          }\n        } else {\n          this.setState({\n            dataSource: []\n          }, function () {\n            if (data.success) {\n              data.data.rows.map(res => {\n                stt += 1;\n                let obj = res;\n                this.setState(prevState => ({\n                  dataSource: [...prevState.dataSource, obj]\n                }));\n              });\n            }\n          });\n        }\n\n        if (data.success) {\n          this.setState(prevState => ({\n            lastPage: data.data.last_page,\n            currentPage: data.data.current_page\n          }));\n        }\n      }).finally(res => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.fetchColumn = () => {\n      AppAPI.getAllColumn().then(res => {\n        const {\n          data\n        } = res;\n        var stt = 0;\n\n        if (data.success) {\n          data.data.map(res => {\n            var _res$width, _res$fixed;\n\n            stt += 1;\n            const obj = {\n              title: res.title,\n              dataIndex: res.name,\n              key: res.name,\n              width: (_res$width = res.width) !== null && _res$width !== void 0 ? _res$width : 250,\n              fixed: (_res$fixed = res.fixed) !== null && _res$fixed !== void 0 ? _res$fixed : 'none'\n            };\n\n            if (res.show || typeof res.show == \"undefined\") {\n              this.setState(prevState => ({\n                columnState: [...prevState.columnState, obj]\n              }));\n            }\n          });\n          this.setState({\n            columnState: [...this.state.columnState, {\n              title: 'Chi tiết',\n              width: 90,\n              dataIndex: 'detail',\n              key: 'detail',\n              fixed: 'right',\n              render: () => /*#__PURE__*/React.createElement(Button, {\n                type: \"primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 39\n                }\n              }, \"Xem\")\n            }]\n          });\n        } else {\n          message.error(data.msg);\n        }\n\n        return true;\n      });\n    };\n\n    this.loadMoreData = () => {\n      var tableContent = document.querySelector('.ant-table-body');\n      tableContent.addEventListener('scroll', event => {\n        let maxScroll = event.target.scrollHeight - event.target.clientHeight;\n        let currentScroll = event.target.scrollTop;\n\n        if (currentScroll === maxScroll && this.state.currentPage < this.state.lastPage) {\n          this.setState({\n            loading: true,\n            page: this.state.page + 1\n          }, function () {\n            this.fetchListDataFromAPI(this.state.params, true);\n          });\n        }\n      });\n    };\n\n    this.getCollection = () => {\n      AppAPI.getCollection().then(res => {\n        const {\n          data\n        } = res;\n\n        if (data.success) {\n          this.setState({\n            collection: data.data\n          });\n        }\n      });\n    };\n\n    this.detailCollection = () => {\n      if (!!this.state.id) {\n        AppAPI.getDetailCollection(this.state.id).then(res => {\n          const {\n            data\n          } = res;\n          let obj;\n          let arr = [];\n\n          if (data.success) {\n            data.data.filter.map(res => {\n              this.state.textFilterBy.map(item => {\n                if (item.key == res[0]) {\n                  obj = {\n                    'text': item.text\n                  };\n                  arr.push(obj);\n                }\n              });\n            });\n            this.setState({\n              filter: arr,\n              params: data.data.filter\n            });\n          }\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.fetchListDataFromAPI();\n    this.fetchColumn();\n    this.loadMoreData();\n    this.getCollection();\n    this.detailCollection();\n  }\n\n  render() {\n    let {\n      loading,\n      dataSource,\n      columnState,\n      textFilterBy,\n      filter\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-column h-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      filter: filter,\n      textFilterBy: textFilterBy,\n      updateDataTable: this.updateDataTable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Main, {\n      collection: this.state.collection,\n      loading: loading,\n      saveCollection: this.saveCollection,\n      dataSource: dataSource,\n      columnState: columnState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Analytics;","map":{"version":3,"sources":["/Users/onion9x/Documents/Source Code/f99_warehouse/src/components/site/datatable/index.js"],"names":["React","Component","Header","Main","message","Button","AppAPI","Analytics","state","columnState","title","width","dataIndex","key","fixed","dataSource","loading","params","page","lastPage","currentPage","collection","id","props","match","filter","textFilterBy","text","saveCollection","then","res","data","success","msg","error","updateDataTable","arrayFilter","document","querySelector","scrollTop","setState","prevState","fetchListDataFromAPI","append","getAllData","stt","rows","map","obj","last_page","current_page","finally","fetchColumn","getAllColumn","name","show","render","loadMoreData","tableContent","addEventListener","event","maxScroll","target","scrollHeight","clientHeight","currentScroll","getCollection","detailCollection","getDetailCollection","arr","item","push","componentDidMount"],"mappings":"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","sourcesContent":["import React, {\n    Component\n} from 'react';\nimport Header from './header';\nimport Main from './main';\nimport './style.sass';\nimport { message, Button } from 'antd';\nimport { AppAPI } from '../../../api/appApi';\n\nclass Analytics extends Component {\n    state = {\n        columnState: [{\n            title: '#',\n            width: 90,\n            dataIndex: 'id',\n            key: 'id',\n            fixed: 'left',\n        }],\n        dataSource: [],\n        loading: true,\n        params: [],\n        page: 1,\n        lastPage: 1,\n        currentPage: 1,\n        collection: [],\n        id: this.props.match.params.id,\n        filter: [],\n        textFilterBy: [\n            { text: 'Tên khách hàng', key: 'customer_name' },\n            { text: 'Số điện thoại', key: 'customer_phone' },\n            { text: 'Mua theo sản phẩm', key: 'products' },\n            { text: 'Số lần mua hàng', key: 'count_buy' },\n            { text: 'Tỉnh thành, Quận huyện', key: 'customer_address' },\n            { text: 'Công ty chi nhánh', key: 'branch' },\n            { text: 'Thời gian mua', key: 'date' },\n        ],\n    }\n\n    componentDidMount() {\n        this.fetchListDataFromAPI();\n        this.fetchColumn();\n        this.loadMoreData();\n        this.getCollection();\n        this.detailCollection();\n    }\n\n    render() {\n        let { loading, dataSource, columnState, textFilterBy, filter } = this.state;\n        return (\n            <div className=\"d-flex flex-column h-100\">\n                <Header filter={filter} textFilterBy={textFilterBy} updateDataTable={this.updateDataTable} />\n                <Main collection={this.state.collection} loading={loading} saveCollection={this.saveCollection} dataSource={dataSource} columnState={columnState} />\n            </div>\n        );\n    }\n\n    saveCollection = (text) => {\n        let params = {\n            'text': text,\n            'filter': this.state.params\n        };\n        AppAPI.saveCollection(params).then(res => {\n            const { data } = res;\n            if (data.success) {\n                message.success(data.msg);\n            }else{\n                message.error(data.msg);\n            }\n        });\n    }\n\n    updateDataTable = (arrayFilter) => {\n        let params = arrayFilter;\n        document.querySelector('.ant-table-body').scrollTop = \"0px\";\n        this.setState(prevState => ({\n            page: 1,\n            params: [...prevState.params, params]\n        }), function () {\n            this.fetchListDataFromAPI(this.state.params);\n        });\n    }\n\n    fetchListDataFromAPI = (params = '', append = false) => {\n        this.setState({ loading: true });\n        let page = this.state.page;\n        AppAPI.getAllData(params, page).then(res => {\n            const { data } = res;\n            var stt = 0;\n            if (append) {\n                if (data.success) {\n                    data.data.rows.map(res => {\n                        stt += 1;\n                        let obj = res;\n                        this.setState(prevState => ({\n                            dataSource: [...prevState.dataSource, obj]\n                        }));\n                    });\n                }\n            }else{\n                this.setState({\n                    dataSource: []\n                }, function () {\n                    if (data.success) {\n                        data.data.rows.map(res => {\n                            stt += 1;\n                            let obj = res;\n                            this.setState(prevState => ({\n                                dataSource: [...prevState.dataSource, obj]\n                            }));\n                        });\n                    }\n                });\n            }\n\n            if (data.success) {\n                this.setState(prevState => ({\n                    lastPage: data.data.last_page,\n                    currentPage: data.data.current_page\n                }));\n            }\n            \n\n        }).finally(res => {\n            this.setState({ loading: false });\n        })\n    }\n\n    fetchColumn = () => {\n        AppAPI.getAllColumn().then(res => {\n            const { data } = res;\n            var stt = 0;\n            if (data.success) {\n                data.data.map(res => {\n                    stt += 1;\n\n                    const obj = {\n                        title: res.title,\n                        dataIndex: res.name,\n                        key: res.name,\n                        width: res.width ?? 250,\n                        fixed: res.fixed ?? 'none'\n                    };\n\n                    if (res.show || typeof res.show == \"undefined\") {\n                        this.setState(prevState => ({\n                            columnState: [...prevState.columnState, obj]\n                        }));\n                    }\n\n                });\n\n                this.setState({\n                    columnState: [...this.state.columnState, {\n                        title: 'Chi tiết',\n                        width: 90,\n                        dataIndex: 'detail',\n                        key: 'detail',\n                        fixed: 'right',\n                        render: () => <Button type=\"primary\">Xem</Button>,\n                    }]\n                });\n            } else {\n                message.error(data.msg);\n            }\n            return true;\n        });\n    }\n\n    loadMoreData = () => {\n        var tableContent = document.querySelector('.ant-table-body')\n        tableContent.addEventListener('scroll', (event) => {\n            let maxScroll = event.target.scrollHeight - event.target.clientHeight\n            let currentScroll = event.target.scrollTop\n            if (currentScroll === maxScroll && this.state.currentPage < this.state.lastPage) {\n                this.setState({\n                    loading: true,\n                    page: this.state.page + 1\n                }, function() { \n                    this.fetchListDataFromAPI(this.state.params, true)\n                });\n            }\n        })\n    }\n\n    getCollection = () => {\n        AppAPI.getCollection().then(res => {\n            const { data } = res;\n            if (data.success) {\n                this.setState({\n                    collection: data.data\n                });\n            }\n        });\n    }\n\n    detailCollection = () => {\n        if (!!this.state.id) {\n            AppAPI.getDetailCollection(this.state.id).then(res => {\n                const { data } = res;\n                let obj;let arr = [];\n                if (data.success) {\n                    data.data.filter.map(res => {\n                        this.state.textFilterBy.map(item => {\n                            if (item.key == res[0]) {\n                                obj = {'text': item.text};\n                                arr.push(obj);\n                            }\n                        });\n                    });\n                    this.setState({\n                        filter: arr,\n                        params: data.data.filter\n                    });\n                }\n            });\n        }\n    }\n}\n\nexport default Analytics;"]},"metadata":{},"sourceType":"module"}