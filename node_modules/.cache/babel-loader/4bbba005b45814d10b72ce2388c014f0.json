{"ast":null,"code":"var _jsxFileName = \"/Users/onion9x/Documents/Source Code/f99_warehouse/src/components/site/datatable/index.js\";\nimport React, { Component } from 'react';\nimport Header from './header';\nimport Main from './main';\nimport Detail from './detail';\nimport './style.sass';\nimport { message, Button } from 'antd';\nimport { AppAPI } from '../../../api/appApi';\n\nclass Analytics extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      columnState: [{\n        title: '#',\n        width: 90,\n        dataIndex: 'id',\n        key: 'id',\n        fixed: 'left'\n      }],\n      dataSource: [],\n      loading: true,\n      params: [],\n      page: 1,\n      lastPage: 1,\n      currentPage: 1,\n      collection: [],\n      visibleDetail: false,\n      id: this.props.match.params.id,\n      filter: [],\n      textFilterBy: [{\n        text: 'Tên khách hàng',\n        key: 'customer_name'\n      }, {\n        text: 'Số điện thoại',\n        key: 'customer_phone'\n      }, {\n        text: 'Mua theo sản phẩm',\n        key: 'products'\n      }, {\n        text: 'Số lần mua hàng',\n        key: 'count_buy'\n      }, {\n        text: 'Tỉnh thành, Quận huyện',\n        key: 'customer_address'\n      }, {\n        text: 'Công ty chi nhánh',\n        key: 'branch'\n      }, {\n        text: 'Thời gian mua',\n        key: 'date'\n      }]\n    };\n\n    this.saveCollection = text => {\n      let params = {\n        'text': text,\n        'filter': this.state.params\n      };\n      AppAPI.saveCollection(params).then(res => {\n        const {\n          data\n        } = res;\n\n        if (data.success) {\n          message.success(data.msg);\n        } else {\n          message.error(data.msg);\n        }\n      });\n    };\n\n    this.updateDataTable = arrayFilter => {\n      let params = arrayFilter;\n      document.querySelector('.ant-table-body').scrollTop = \"0px\";\n      this.setState(prevState => ({\n        page: 1,\n        params: [...prevState.params, params]\n      }), function () {\n        this.fetchListDataFromAPI(this.state.params);\n      });\n    };\n\n    this.fetchListDataFromAPI = (params = '', append = false) => {\n      this.setState({\n        loading: true\n      });\n      let page = this.state.page;\n      AppAPI.getAllData(params, page).then(res => {\n        const {\n          data\n        } = res;\n        var stt = 0;\n\n        if (append) {\n          if (data.success) {\n            data.data.rows.map(res => {\n              stt += 1;\n              let obj = res;\n              this.setState(prevState => ({\n                dataSource: [...prevState.dataSource, obj]\n              }));\n            });\n          }\n        } else {\n          this.setState({\n            dataSource: []\n          }, function () {\n            if (data.success) {\n              data.data.rows.map(res => {\n                stt += 1;\n                let obj = res;\n                this.setState(prevState => ({\n                  dataSource: [...prevState.dataSource, obj]\n                }));\n              });\n            }\n          });\n        }\n\n        if (data.success) {\n          this.setState(prevState => ({\n            lastPage: data.data.last_page,\n            currentPage: data.data.current_page\n          }));\n        }\n      }).finally(res => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.fetchColumn = () => {\n      AppAPI.getAllColumn().then(res => {\n        const {\n          data\n        } = res;\n        var stt = 0;\n\n        if (data.success) {\n          data.data.map(res => {\n            var _res$width, _res$fixed;\n\n            stt += 1;\n            const obj = {\n              title: res.title,\n              dataIndex: res.name,\n              key: res.name,\n              width: (_res$width = res.width) !== null && _res$width !== void 0 ? _res$width : 250,\n              fixed: (_res$fixed = res.fixed) !== null && _res$fixed !== void 0 ? _res$fixed : 'none'\n            };\n\n            if (res.show || typeof res.show == \"undefined\") {\n              this.setState(prevState => ({\n                columnState: [...prevState.columnState, obj]\n              }));\n            }\n          });\n          this.setState({\n            columnState: [...this.state.columnState, {\n              title: 'Chi tiết',\n              width: 90,\n              dataIndex: 'detail',\n              key: 'detail',\n              fixed: 'right',\n              render: () => /*#__PURE__*/React.createElement(Button, {\n                onClick: e => this.openDetail(true),\n                type: \"primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 39\n                }\n              }, \"Xem\")\n            }]\n          });\n        } else {\n          message.error(data.msg);\n        }\n\n        return true;\n      });\n    };\n\n    this.loadMoreData = () => {\n      var tableContent = document.querySelector('.ant-table-body');\n      tableContent.addEventListener('scroll', event => {\n        let maxScroll = event.target.scrollHeight - event.target.clientHeight;\n        let currentScroll = event.target.scrollTop;\n\n        if (currentScroll === maxScroll && this.state.currentPage < this.state.lastPage) {\n          this.setState({\n            loading: true,\n            page: this.state.page + 1\n          }, function () {\n            this.fetchListDataFromAPI(this.state.params, true);\n          });\n        }\n      });\n    };\n\n    this.getCollection = () => {\n      AppAPI.getCollection().then(res => {\n        const {\n          data\n        } = res;\n\n        if (data.success) {\n          this.setState({\n            collection: data.data\n          });\n        }\n      });\n    };\n\n    this.detailCollection = () => {\n      if (!!this.state.id) {\n        AppAPI.getDetailCollection(this.state.id).then(res => {\n          const {\n            data\n          } = res;\n          let obj;\n          let arr = [];\n\n          if (data.success) {\n            data.data.filter.map(res => {\n              let filterIs = res[1].replace(\"is\", 'là').replace('equal', 'có chứa').replace('start', 'bắt đầu là').replace('end', 'kết thúc là');\n              this.state.textFilterBy.map(item => {\n                if (item.key == res[0]) {\n                  obj = {\n                    'text': item.text + \" \" + filterIs + \" \" + res[2]\n                  };\n                  arr.push(obj);\n                }\n              });\n            });\n            this.setState({\n              filter: arr,\n              params: data.data.filter\n            }, this.fetchListDataFromAPI(data.data.filter));\n          }\n        });\n      } else {\n        this.fetchListDataFromAPI();\n      }\n    };\n\n    this.updateFilter = obj => {\n      this.setState(prevState => ({\n        filter: [...prevState.filter, obj]\n      }));\n    };\n\n    this.openDetail = bool => {\n      this.setState({\n        visibleDetail: bool\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.fetchColumn();\n    this.loadMoreData();\n    this.getCollection();\n    this.detailCollection();\n  }\n\n  render() {\n    let {\n      loading,\n      dataSource,\n      columnState,\n      textFilterBy,\n      filter\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-column h-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      updateFilter: this.updateFilter,\n      filter: filter,\n      textFilterBy: textFilterBy,\n      updateDataTable: this.updateDataTable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Main, {\n      collection: this.state.collection,\n      loading: loading,\n      saveCollection: this.saveCollection,\n      dataSource: dataSource,\n      columnState: columnState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Detail, {\n      visibleDetail: this.visibleDetail,\n      visibleDetail: this.state.visibleDetail,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Analytics;","map":{"version":3,"sources":["/Users/onion9x/Documents/Source Code/f99_warehouse/src/components/site/datatable/index.js"],"names":["React","Component","Header","Main","Detail","message","Button","AppAPI","Analytics","state","columnState","title","width","dataIndex","key","fixed","dataSource","loading","params","page","lastPage","currentPage","collection","visibleDetail","id","props","match","filter","textFilterBy","text","saveCollection","then","res","data","success","msg","error","updateDataTable","arrayFilter","document","querySelector","scrollTop","setState","prevState","fetchListDataFromAPI","append","getAllData","stt","rows","map","obj","last_page","current_page","finally","fetchColumn","getAllColumn","name","show","render","e","openDetail","loadMoreData","tableContent","addEventListener","event","maxScroll","target","scrollHeight","clientHeight","currentScroll","getCollection","detailCollection","getDetailCollection","arr","filterIs","replace","item","push","updateFilter","bool","componentDidMount"],"mappings":"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","sourcesContent":["import React, {\n    Component\n} from 'react';\nimport Header from './header';\nimport Main from './main';\nimport Detail from './detail';\nimport './style.sass';\nimport { message, Button } from 'antd';\nimport { AppAPI } from '../../../api/appApi';\n\nclass Analytics extends Component {\n    state = {\n        columnState: [{\n            title: '#',\n            width: 90,\n            dataIndex: 'id',\n            key: 'id',\n            fixed: 'left',\n        }],\n        dataSource: [],\n        loading: true,\n        params: [],\n        page: 1,\n        lastPage: 1,\n        currentPage: 1,\n        collection: [],\n        visibleDetail: false,\n        id: this.props.match.params.id,\n        filter: [],\n        textFilterBy: [\n            { text: 'Tên khách hàng', key: 'customer_name' },\n            { text: 'Số điện thoại', key: 'customer_phone' },\n            { text: 'Mua theo sản phẩm', key: 'products' },\n            { text: 'Số lần mua hàng', key: 'count_buy' },\n            { text: 'Tỉnh thành, Quận huyện', key: 'customer_address' },\n            { text: 'Công ty chi nhánh', key: 'branch' },\n            { text: 'Thời gian mua', key: 'date' },\n        ],\n    }\n\n    componentDidMount() {\n        this.fetchColumn();\n        this.loadMoreData();\n        this.getCollection();\n        this.detailCollection();\n    }\n\n    render() {\n        let { loading, dataSource, columnState, textFilterBy, filter } = this.state;\n        return (\n            <div className=\"d-flex flex-column h-100\">\n                <Header updateFilter={this.updateFilter} filter={filter} textFilterBy={textFilterBy} updateDataTable={this.updateDataTable} />\n                <Main collection={this.state.collection} loading={loading} saveCollection={this.saveCollection} dataSource={dataSource} columnState={columnState} />\n                <Detail visibleDetail={this.visibleDetail} visibleDetail={this.state.visibleDetail} />\n            </div>\n        );\n    }\n\n    saveCollection = (text) => {\n        let params = {\n            'text': text,\n            'filter': this.state.params\n        };\n        AppAPI.saveCollection(params).then(res => {\n            const { data } = res;\n            if (data.success) {\n                message.success(data.msg);\n            }else{\n                message.error(data.msg);\n            }\n        });\n    }\n\n    updateDataTable = (arrayFilter) => {\n        let params = arrayFilter;\n        document.querySelector('.ant-table-body').scrollTop = \"0px\";\n        this.setState(prevState => ({\n            page: 1,\n            params: [...prevState.params, params]\n        }), function () {\n            this.fetchListDataFromAPI(this.state.params);\n        });\n    }\n\n    fetchListDataFromAPI = (params = '', append = false) => {\n        this.setState({ loading: true });\n        let page = this.state.page;\n        AppAPI.getAllData(params, page).then(res => {\n            const { data } = res;\n            var stt = 0;\n            if (append) {\n                if (data.success) {\n                    data.data.rows.map(res => {\n                        stt += 1;\n                        let obj = res;\n                        this.setState(prevState => ({\n                            dataSource: [...prevState.dataSource, obj]\n                        }));\n                    });\n                }\n            }else{\n                this.setState({\n                    dataSource: []\n                }, function () {\n                    if (data.success) {\n                        data.data.rows.map(res => {\n                            stt += 1;\n                            let obj = res;\n                            this.setState(prevState => ({\n                                dataSource: [...prevState.dataSource, obj]\n                            }));\n                        });\n                    }\n                });\n            }\n\n            if (data.success) {\n                this.setState(prevState => ({\n                    lastPage: data.data.last_page,\n                    currentPage: data.data.current_page\n                }));\n            }\n            \n\n        }).finally(res => {\n            this.setState({ loading: false });\n        })\n    }\n\n    fetchColumn = () => {\n        AppAPI.getAllColumn().then(res => {\n            const { data } = res;\n            var stt = 0;\n            if (data.success) {\n                data.data.map(res => {\n                    stt += 1;\n\n                    const obj = {\n                        title: res.title,\n                        dataIndex: res.name,\n                        key: res.name,\n                        width: res.width ?? 250,\n                        fixed: res.fixed ?? 'none'\n                    };\n\n                    if (res.show || typeof res.show == \"undefined\") {\n                        this.setState(prevState => ({\n                            columnState: [...prevState.columnState, obj]\n                        }));\n                    }\n\n                });\n\n                this.setState({\n                    columnState: [...this.state.columnState, {\n                        title: 'Chi tiết',\n                        width: 90,\n                        dataIndex: 'detail',\n                        key: 'detail',\n                        fixed: 'right',\n                        render: () => <Button onClick={e => this.openDetail(true)} type=\"primary\">Xem</Button>,\n                    }]\n                });\n            } else {\n                message.error(data.msg);\n            }\n            return true;\n        });\n    }\n\n    loadMoreData = () => {\n        var tableContent = document.querySelector('.ant-table-body')\n        tableContent.addEventListener('scroll', (event) => {\n            let maxScroll = event.target.scrollHeight - event.target.clientHeight\n            let currentScroll = event.target.scrollTop\n            if (currentScroll === maxScroll && this.state.currentPage < this.state.lastPage) {\n                this.setState({\n                    loading: true,\n                    page: this.state.page + 1\n                }, function() { \n                    this.fetchListDataFromAPI(this.state.params, true)\n                });\n            }\n        })\n    }\n\n    getCollection = () => {\n        AppAPI.getCollection().then(res => {\n            const { data } = res;\n            if (data.success) {\n                this.setState({\n                    collection: data.data\n                });\n            }\n        });\n    }\n\n    detailCollection = () => {\n        if (!!this.state.id) {\n            AppAPI.getDetailCollection(this.state.id).then(res => {\n                const { data } = res;\n                let obj;let arr = [];\n\n                if (data.success) {\n                    data.data.filter.map(res => {\n                        let filterIs = res[1].replace(\"is\", 'là').replace('equal', 'có chứa').replace('start', 'bắt đầu là').replace('end', 'kết thúc là');\n\n                        this.state.textFilterBy.map(item => {\n                            if (item.key == res[0]) {\n                                obj = {'text': item.text + \" \" +filterIs + \" \" + res[2]};\n                                arr.push(obj);\n                            }\n                        });\n                    });\n                    this.setState({\n                        filter: arr,\n                        params: data.data.filter\n                    }, this.fetchListDataFromAPI(data.data.filter));\n                }\n            });\n        }else{\n            this.fetchListDataFromAPI();\n        }\n    }\n\n    updateFilter = (obj) => {\n        this.setState(prevState => ({\n            filter: [...prevState.filter, obj]\n        }));\n    }\n\n    openDetail = (bool) => {\n        this.setState({\n            visibleDetail: bool\n        });\n    }\n\n}\n\nexport default Analytics;"]},"metadata":{},"sourceType":"module"}