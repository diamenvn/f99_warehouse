{"ast":null,"code":"var _jsxFileName = \"/Users/onion9x/Documents/Source Code/f99_warehouse/src/components/site/datatable/index.js\";\nimport React, { Component } from 'react';\nimport Header from './header';\nimport Main from './main';\nimport './style.sass';\nimport { message, Button } from 'antd';\nimport { AppAPI } from '../../../api/appApi';\n\nclass Analytics extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      columnState: [{\n        title: '#',\n        width: 90,\n        dataIndex: 'id',\n        key: 'id',\n        fixed: 'left'\n      }],\n      dataSource: [],\n      loading: true,\n      params: [],\n      page: 1,\n      lastPage: 1,\n      currentPage: 1\n    };\n\n    this.saveCollection = text => {\n      console.log(this.state.params);\n    };\n\n    this.updateDataTable = arrayFilter => {\n      let params = arrayFilter;\n      document.querySelector('.ant-table-body').scrollTop = \"0px\";\n      this.setState(prevState => ({\n        page: 1,\n        params: [...prevState.params, params]\n      }), function () {\n        this.fetchListDataFromAPI(this.state.params);\n      });\n    };\n\n    this.fetchListDataFromAPI = (params = '', append = false) => {\n      this.setState({\n        loading: true\n      });\n      let page = this.state.page;\n      AppAPI.getAllData(params, page).then(res => {\n        const {\n          data\n        } = res;\n        var stt = 0;\n\n        if (append) {\n          if (data.success) {\n            data.data.rows.map(res => {\n              stt += 1;\n              let obj = res;\n              this.setState(prevState => ({\n                dataSource: [...prevState.dataSource, obj]\n              }));\n            });\n          }\n        } else {\n          this.setState({\n            dataSource: []\n          }, function () {\n            if (data.success) {\n              data.data.rows.map(res => {\n                stt += 1;\n                let obj = res;\n                this.setState(prevState => ({\n                  dataSource: [...prevState.dataSource, obj]\n                }));\n              });\n            }\n          });\n        }\n\n        if (data.success) {\n          this.setState(prevState => ({\n            lastPage: data.data.last_page,\n            currentPage: data.data.current_page\n          }));\n        }\n      }).finally(res => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.fetchColumn = () => {\n      AppAPI.getAllColumn().then(res => {\n        const {\n          data\n        } = res;\n        var stt = 0;\n\n        if (data.success) {\n          data.data.map(res => {\n            var _res$width, _res$fixed;\n\n            stt += 1;\n            const obj = {\n              title: res.title,\n              dataIndex: res.name,\n              key: res.name,\n              width: (_res$width = res.width) !== null && _res$width !== void 0 ? _res$width : 250,\n              fixed: (_res$fixed = res.fixed) !== null && _res$fixed !== void 0 ? _res$fixed : 'none'\n            };\n\n            if (res.show || typeof res.show == \"undefined\") {\n              this.setState(prevState => ({\n                columnState: [...prevState.columnState, obj]\n              }));\n            }\n          });\n          this.setState({\n            columnState: [...this.state.columnState, {\n              title: 'Chi tiáº¿t',\n              width: 90,\n              dataIndex: 'detail',\n              key: 'detail',\n              fixed: 'right',\n              render: () => /*#__PURE__*/React.createElement(Button, {\n                type: \"primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 39\n                }\n              }, \"Xem\")\n            }]\n          });\n        } else {\n          message.error(data.msg);\n        }\n\n        return true;\n      });\n    };\n\n    this.loadMoreData = () => {\n      var tableContent = document.querySelector('.ant-table-body');\n      tableContent.addEventListener('scroll', event => {\n        let maxScroll = event.target.scrollHeight - event.target.clientHeight;\n        let currentScroll = event.target.scrollTop;\n\n        if (currentScroll === maxScroll && this.state.currentPage < this.state.lastPage) {\n          this.setState({\n            loading: true,\n            page: this.state.page + 1\n          }, function () {\n            this.fetchListDataFromAPI(this.state.params, true);\n          });\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.fetchListDataFromAPI();\n    this.fetchColumn();\n    this.loadMoreData();\n  }\n\n  render() {\n    let {\n      loading,\n      dataSource,\n      columnState\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-column h-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      updateDataTable: this.updateDataTable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Main, {\n      loading: loading,\n      saveCollection: this.saveCollection,\n      dataSource: dataSource,\n      columnState: columnState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Analytics;","map":{"version":3,"sources":["/Users/onion9x/Documents/Source Code/f99_warehouse/src/components/site/datatable/index.js"],"names":["React","Component","Header","Main","message","Button","AppAPI","Analytics","state","columnState","title","width","dataIndex","key","fixed","dataSource","loading","params","page","lastPage","currentPage","saveCollection","text","console","log","updateDataTable","arrayFilter","document","querySelector","scrollTop","setState","prevState","fetchListDataFromAPI","append","getAllData","then","res","data","stt","success","rows","map","obj","last_page","current_page","finally","fetchColumn","getAllColumn","name","show","render","error","msg","loadMoreData","tableContent","addEventListener","event","maxScroll","target","scrollHeight","clientHeight","currentScroll","componentDidMount"],"mappings":"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","sourcesContent":["import React, {\n    Component\n} from 'react';\nimport Header from './header';\nimport Main from './main';\nimport './style.sass';\nimport { message, Button } from 'antd';\nimport { AppAPI } from '../../../api/appApi';\n\nclass Analytics extends Component {\n    state = {\n        columnState: [{\n            title: '#',\n            width: 90,\n            dataIndex: 'id',\n            key: 'id',\n            fixed: 'left',\n        }],\n        dataSource: [],\n        loading: true,\n        params: [],\n        page: 1,\n        lastPage: 1,\n        currentPage: 1,\n    }\n\n    componentDidMount() {\n        this.fetchListDataFromAPI();\n        this.fetchColumn();\n        this.loadMoreData();\n    }\n\n    render() {\n        let { loading, dataSource, columnState } = this.state;\n        return (\n            <div className=\"d-flex flex-column h-100\">\n                <Header updateDataTable={this.updateDataTable} />\n                <Main loading={loading} saveCollection={this.saveCollection} dataSource={dataSource} columnState={columnState} />\n            </div>\n        );\n    }\n\n    saveCollection = (text) => {\n        console.log(this.state.params);\n    }\n\n    updateDataTable = (arrayFilter) => {\n        let params = arrayFilter;\n        document.querySelector('.ant-table-body').scrollTop = \"0px\";\n        this.setState(prevState => ({\n            page: 1,\n            params: [...prevState.params, params]\n        }), function () {\n            this.fetchListDataFromAPI(this.state.params);\n        });\n    }\n\n    fetchListDataFromAPI = (params = '', append = false) => {\n        this.setState({ loading: true });\n        let page = this.state.page;\n        AppAPI.getAllData(params, page).then(res => {\n            const { data } = res;\n            var stt = 0;\n            if (append) {\n                if (data.success) {\n                    data.data.rows.map(res => {\n                        stt += 1;\n                        let obj = res;\n                        this.setState(prevState => ({\n                            dataSource: [...prevState.dataSource, obj]\n                        }));\n                    });\n                }\n            }else{\n                this.setState({\n                    dataSource: []\n                }, function () {\n                    if (data.success) {\n                        data.data.rows.map(res => {\n                            stt += 1;\n                            let obj = res;\n                            this.setState(prevState => ({\n                                dataSource: [...prevState.dataSource, obj]\n                            }));\n                        });\n                    }\n                });\n            }\n\n            if (data.success) {\n                this.setState(prevState => ({\n                    lastPage: data.data.last_page,\n                    currentPage: data.data.current_page\n                }));\n            }\n            \n\n        }).finally(res => {\n            this.setState({ loading: false });\n        })\n    }\n\n    fetchColumn = () => {\n        AppAPI.getAllColumn().then(res => {\n            const { data } = res;\n            var stt = 0;\n            if (data.success) {\n                data.data.map(res => {\n                    stt += 1;\n\n                    const obj = {\n                        title: res.title,\n                        dataIndex: res.name,\n                        key: res.name,\n                        width: res.width ?? 250,\n                        fixed: res.fixed ?? 'none'\n                    };\n\n                    if (res.show || typeof res.show == \"undefined\") {\n                        this.setState(prevState => ({\n                            columnState: [...prevState.columnState, obj]\n                        }));\n                    }\n\n                });\n\n                this.setState({\n                    columnState: [...this.state.columnState, {\n                        title: 'Chi tiáº¿t',\n                        width: 90,\n                        dataIndex: 'detail',\n                        key: 'detail',\n                        fixed: 'right',\n                        render: () => <Button type=\"primary\">Xem</Button>,\n                    }]\n                });\n            } else {\n                message.error(data.msg);\n            }\n            return true;\n        });\n    }\n\n    loadMoreData = () => {\n        var tableContent = document.querySelector('.ant-table-body')\n        tableContent.addEventListener('scroll', (event) => {\n            let maxScroll = event.target.scrollHeight - event.target.clientHeight\n            let currentScroll = event.target.scrollTop\n            if (currentScroll === maxScroll && this.state.currentPage < this.state.lastPage) {\n                this.setState({\n                    loading: true,\n                    page: this.state.page + 1\n                }, function() { \n                    this.fetchListDataFromAPI(this.state.params, true)\n                });\n            }\n        })\n    }\n}\n\nexport default Analytics;"]},"metadata":{},"sourceType":"module"}